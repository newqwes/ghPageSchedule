{"version":3,"sources":["components/TableRSchool/originData.tsx","components/TableRSchool/columnsName.tsx","components/TableRSchool/EditableCell.tsx","components/TableRSchool/index.jsx","components/TableRSchool/TableRSchool.tsx","index.tsx"],"names":["originData","i","push","key","toString","time","Date","toISOString","slice","timeToComplete","date","week","course","place","name","organizer","url","task","materials","result","comment","importance","done","score","tags","columnsName","title","dataIndex","editable","width","EditableCell","editing","inputType","children","record","index","restProps","inputNode","Item","style","margin","rules","required","message","TableRSchool","Form","useForm","form","useState","data","setData","editingKey","setEditingKey","isEditing","cancel","save","a","validateFields","row","newData","findIndex","item","splice","console","log","mergedColumns","render","_","type","onClick","marginRight","onConfirm","disabled","setFieldsValue","edit","map","col","onCell","component","components","body","cell","bordered","dataSource","columns","rowClassName","pagination","onChange","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.626082e0.chunk.js","sourcesContent":["import { Item } from \"./TablesProps.model\";\n\nexport const originData: Item[] = [];\nfor (let i = 0; i < 3; i++) {\n  originData.push({\n    key: i.toString(),\n    time: new Date().toISOString().slice(11, 16),\n    timeToComplete: \"20 дней\",\n    date: new Date().toISOString().slice(5, 10),\n    week: i + 3,\n    course: `React курс ${i}`,\n    place: \"онлайн трансляция\",\n    name: \"Работа с Git\",\n    organizer: \"Ольга Миронян\",\n    url: \"youtube.com/c/RollingScopesSchool/\" + i,\n    task: \"Создать первый коммит\",\n    materials: \"Изучение веток git hubr\",\n    result: \"что студент должен уметь\",\n    comment: \"Тут будет комментарий\",\n    importance: true,\n    done: false,\n    score: 131,\n    tags: [\"nice\", \"developer\"],\n  });\n}\n","import { IAgeMap } from \"./TablesProps.model\";\n\nexport const columnsName: IAgeMap[] = [\n  {\n    title: \"Время\",\n    dataIndex: \"time\",\n    editable: true,\n  },\n  {\n    title: \"Время окончания\",\n    dataIndex: \"timeToComplete\",\n    editable: true,\n  },\n  {\n    title: \"Дата\",\n    dataIndex: \"date\",\n    editable: true,\n  },\n  {\n    title: \"Неделя\",\n    dataIndex: \"week\",\n    editable: true,\n  },\n  {\n    title: \"Курс\",\n    dataIndex: \"course\",\n    editable: true,\n  },\n  {\n    title: \"Место\",\n    dataIndex: \"place\",\n    editable: true,\n  },\n  {\n    title: \"Название\",\n    dataIndex: \"name\",\n    editable: true,\n  },\n  {\n    title: \"Организатор\",\n    dataIndex: \"organizer\",\n    editable: true,\n  },\n  {\n    title: \"URL\",\n    dataIndex: \"url\",\n    editable: true,\n  },\n  {\n    title: \"Задание\",\n    dataIndex: \"task\",\n    editable: true,\n  },\n  {\n    title: \"Материалы\",\n    dataIndex: \"materials\",\n    editable: true,\n  },\n  {\n    title: \"Ожидания\",\n    dataIndex: \"result\",\n    editable: true,\n  },\n  {\n    title: \"Комментарий\",\n    dataIndex: \"comment\",\n    editable: true,\n  },\n  {\n    title: \"Важность\",\n    dataIndex: \"importance\",\n    editable: true,\n  },\n  {\n    title: \"Сделано\",\n    dataIndex: \"done\",\n    editable: true,\n  },\n  {\n    title: \"Баллы\",\n    dataIndex: \"score\",\n    editable: true,\n  },\n  {\n    title: \"Теги\",\n    dataIndex: \"tags\",\n    width: \"5%\",\n    editable: true,\n  },\n];\n","import React from \"react\";\nimport { Input, InputNumber, Form } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./Tables.scss\";\nimport { EditableCellProps } from \"./TablesProps.model\";\n\nconst EditableCell: React.FC<EditableCellProps> = ({\n  editing,\n  dataIndex,\n  title,\n  inputType,\n  record,\n  index,\n  children,\n  ...restProps\n}) => {\n  const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />;\n\n  return (\n    <td {...restProps}>\n      {editing ? (\n        <Form.Item\n          name={dataIndex}\n          style={{ margin: 0 }}\n          rules={[\n            {\n              required: true,\n              message: `Please Input ${title}!`,\n            },\n          ]}\n        >\n          {inputNode}\n        </Form.Item>\n      ) : (\n        children\n      )}\n    </td>\n  );\n};\n\nexport default EditableCell;\n","import TableRSchool from \"./TableRSchool.tsx\";\n\nexport default TableRSchool;\n","import React, { useState } from \"react\";\nimport { Table, Popconfirm, Form } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport \"./Tables.scss\";\nimport { Item, IAgeMap } from \"./TablesProps.model\";\nimport { originData } from \"./originData\";\nimport { columnsName } from \"./columnsName\";\nimport EditableCell from \"./EditableCell\";\n\nconst TableRSchool = () => {\n  const [form] = Form.useForm(); // хранится общий объект для формы ant\n  const [data, setData] = useState(originData); // хранятся все данные таблиц которые приходят\n  const [editingKey, setEditingKey] = useState(\"\"); // храним какое поле(строку таблыцы) сейчас редактируем\n  const isEditing = (record: Item) => record.key === editingKey; // указываем (true/false) какое поле сейчас находится в формате редактирования\n\n  const edit = (record: Item) => {\n    //при нажатии на кнопку edit\n    form.setFieldsValue({ ...record }); //(при редактировании) заполняет поля input в форме значениями, что хранились ранее\n    setEditingKey(record.key); // указывает какая из строк сейчас редактируется\n  };\n  const cancel = () => {\n    //при нажатии на кнопку edit\n    setEditingKey(\"\"); // отменяет редактирование\n  };\n\n  const save = async (key: React.Key) => {\n    // при нажатии кнопки сохранить\n    try {\n      const row = (await form.validateFields()) as Item; // хранятся все данные формы (input'ов) из одной строки таблицы (дата, урок, адрес, задание)\n      const newData = [...data]; // хранятся все данные всех строк таблиц (дата, урок, адрес, задание)\n      const index = newData.findIndex((item) => key === item.key); // Указывает индекс массива пришедших данных, какой из них сейчас находится под редактированием\n      if (index > -1) {\n        const item = newData[index]; // хранится строка с данными (вся: дата, время, название) которая сейчас будет редактироваться\n        newData.splice(index, 1, {\n          //заменяем в массиве элемент под номером index (точнее его сначала удаляем потом добавляем ...item, ...row) который пришел с данными (всеми данными таблицы всех строк проиндексированные)\n          ...item, // что было изначально\n          ...row, // если что то поменялось то тут мы перезатрем что было в ...item,\n        });\n        setData(newData); // все сохранения изменения что мы сделали при помощи splice \"сэтаем\" в originData (наши данные) которые хронятся уже в data\n        setEditingKey(\"\"); // указываем (устанавливаем) что в режиме редактирования ни какое поле сейчас не учавствует\n      } else {\n        // (своеобразная обработка ошибки) если каким то образом редактируем элемент массива index <= -1, то ошибка не падает но ни один из элементов не будет перезатерт всё сохраняю\n        newData.push(row);\n        setData(newData);\n        setEditingKey(\"\");\n      }\n    } catch (errInfo) {\n      // обработка ошибки если нажали на кнопку Save, что то пошло не так, то смотреть, что именно в консоль\n      console.log(\"Validate Failed:\", errInfo); // вывод ошибки в консоль при сохранении\n    }\n  };\n\n  const columns: IAgeMap[] = [\n    // Хронятся данные названия столбцов (title, dataIndex) и то можно ли их редактировать,\n    ...columnsName, // Данные с названием столбцов импортируется из columnsName.tsx\n    {\n      title: \"Редактирование\",\n      dataIndex: \"operation\",\n      render: (_: any, record: Item) => {\n        // _ заглушка что бы брать record вторым параметром для render (первый парамент зарезервирован React)\n        const editable = isEditing(record); // (render вызывается всякий раз как изменяется что то на странице, или создается новая строка с данными) каждый раз проверяем record (строка целиком, они приходят по порядку) пришла если с возможностью редактирования тогда показываем кнопки \"Save\" и \"Cancel\" иначе кнопку с \"Edit\"\n        return editable ? (\n          <span>\n            <button type=\"button\" onClick={() => save(record.key)} style={{ marginRight: 8 }}>\n              Save\n            </button>\n            <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <button>Cancel</button>\n            </Popconfirm>\n          </span>\n        ) : (\n          <button type=\"button\" disabled={editingKey !== \"\"} onClick={() => edit(record)}>\n            Edit\n          </button>\n        );\n        //save отправим колбэк с ключем текущей строки что бы сохранить\n        //cancel отправим колбэк с ключем текущей строки что бы отменить\n        //Popconfirm от ant что бы спросить уверены или нет\n        //disabled={editingKey !== \"\"} отключаем все кнопки Edit на других строках на других строках во время редактирования\n        //edit отправим колбэк с данными изменяемой в данный момент строкой\n      },\n    },\n  ];\n  const mergedColumns = columns.map((col) => {\n    if (!col.editable) {\n      return col;\n    }\n    return {\n      ...col,\n      onCell: (record: Item) => ({\n        record,\n        inputType: col.dataIndex === \"age\" ? \"number\" : \"text\",\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record),\n      }),\n    };\n  });\n\n  return (\n    <Form form={form} component={false}>\n      <Table\n        components={{\n          body: {\n            cell: EditableCell,\n          },\n        }}\n        bordered\n        dataSource={data}\n        columns={mergedColumns}\n        rowClassName=\"editable-row\"\n        pagination={{\n          onChange: cancel,\n        }}\n      />\n    </Form>\n  );\n};\n\nexport default TableRSchool;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport TableRSchool from \"./components/TableRSchool\";\nReactDOM.render(\n  <React.StrictMode>\n    <TableRSchool />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}